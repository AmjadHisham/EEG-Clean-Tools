%% Run through the high pass and look at the spectrum afterwards
pop_editoptions('option_single', false, 'option_savetwofiles', false);

%% VEP test runs
% Global comparison
statFiles = {
    'N:\\ARLAnalysis\\VEPPrep\\VEPRobustHP1Hz_Report\\dataStatistics.mat'; ...
    'N:\\ARLAnalysis\VEPPrep\\VEPAverageHP1Hz_Report\\dataStatistics.mat'; ...
    'N:\\ARLAnalysis\\VEPPrep\\VEPMastoidHP1Hz_Report\\dataStatistics.mat'; ...
    'N:\\ARLAnalysis\NCTU\\NCTUStandardLevel2\\dataStatistics.mat'; ...
    'N:\\ARLAnalysis\NCTU\SpecificLevel2Average\\dataStatistics.mat'; ...
    'N:\\ARLAnalysis\NCTU\SpecificLevel2MastoidBefore\\dataStatistics.mat'
    };
statNames = {'collectionStats'; 'collectionStats'; 'collectionStats'; ...
             'collectionStats'; 'collectionStats'; 'collectionStats' ...
    };

legendString = {'B64-Robust '; 'B64-Average '; 'B64-Mastoid '; ...
                'N32-Robust '; 'N32-Average '; 'N32-Mastoid '
    };
%%
% statFiles = {'N:\\ARLAnalysis\\NCTU\\Level2A\\dataStatistics.mat'; ...
%              'N:\\ARLAnalysis\KaggleBCIStandardLevel2\\reports\\test\\dataStatistics.mat'; ...
%              'N:\\ARLAnalysis\KaggleBCIStandardLevel2\\reports\\train\\dataStatistics.mat'; ...
%              'N:\\ARLAnalysis\\VEPStandardLevel2AReports\\dataStatistics.mat'; ...
%              'N:\\ARL_BCIT_Program\\Level2AReports\\T1\\dataStatistics.mat'; ...
%              'N:\\ARL_BCIT_Program\\Level2AReports\\T2\\dataStatistics.mat'; ...
%              'N:\\ARL_BCIT_Program\\Level2AReports\\T3\\dataStatistics.mat'};
% 
% statNames = {'collectionStats'; ...
%              'collectionStatsTest'; 'collectionStatsTrain'; ...
%              'collectionStats'; ...
%              'collectionStats'; 'collectionStats'; 'collectionStats'};
%
% legendString = {'BCITest', 'BCITrain'};
% statFiles = {'N:\\ARLAnalysis\KaggleBCIStandardLevel2\\reports\\test\\dataStatistics.mat'; ...
%              'N:\\ARLAnalysis\KaggleBCIStandardLevel2\\reports\\train\\dataStatistics.mat'};
% statNames = {'collectionStatsTest'; 'collectionStatsTrain'};
%legendString = {'NCTU', 'BCITest', 'BCITrain', 'VEP', 'BCIT-T1', 'BCIT-T2', 'BCIT-T3'};
%-----------------------------------NCTU-------------------------------------

%% Global comparison
% statFiles = {
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustCutoff0p5Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedCutoff0p5Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustCutoff0p3Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedCutoff0p3Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedCutoff0p2Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPStandardLevel2MastoidBeforeRobustReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2MastoidBeforeRobustDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2MastoidDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidBeforeReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2MastoidBeforeDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2AverageReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2AverageDetrendedReports\\dataStatistics.mat', ...
% %     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidBeforeAverageReports\\dataStatistics.mat'};
%  
% legendString = { ...
%      'Robust', 'D-Robust', 'Robust-0.5', 'D-Robust-0.5', ...
%      'Robust-0.3', 'D-Robust-0.3', 'D-Robust-0.2', ...
%      'M-Robust', 'MD-Robust', 'Mastoid', 'D-Mastoid', ...
%      'M-Before', 'MD-Before', 'Average', 'D-Average', 'M-average' ...
%      };    
%  
% statNames = { ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%      'collectionStats'; ...
%      };
%          
%%
% statFiles = {
%     'N:\\ARLAnalysis\\NCTU\\NCTUStandardLevel2\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\NCTU\\SpecificLevel2Average\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\NCTU\\SpecificLevel2MastoidBefore\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPStandardLevel2RobustReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPStandardLevel2MastoidBeforeRobustReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidBeforeReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2AverageReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNew\\VEPSpecificLevel2MastoidBeforeAverageReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2RobustDetrendedCutoff0p5Reports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPStandardLevel2MastoidBeforeRobustDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2MastoidDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2MastoidBeforeDetrendedReports\\dataStatistics.mat', ...
%     'N:\\ARLAnalysis\\VEPNewTrend\\VEPSpecificLevel2AverageDetrendedReports\\dataStatistics.mat'};
% 
%          
% statNames = { ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%     'collectionStats'; 'collectionStats'; 'collectionStats'; ...
%      'collectionStats'; 'collectionStats'; 'collectionStats' ...
%      };
%           
%  legendString = { ...
%      'LK M-Robust', 'LK M-Average', 'LK M-Before', ...
%      'VEP Robust', 'VEP M-Robust', 'VEP Mastoid', ...
%      'VEP M-Before', 'VEP Average', 'VEP M-Average', 'VEP original', ...
%      'VEP robust', 'VEP d-robust', 'VEP d-robust-0.5', ...
%      'VEP md-robust', 'VEP d-mastoid', 'VEP md-before', 'VEP d-average' ...
%      };

originalIndices = {1};
%% Read the collectionStats files
collections = cell(length(statFiles), 1);
for k = 1:length(collections)
    fprintf('%d: %s\n', k, statFiles{k});
    x = load(statFiles{k});
    collections{k} = x.(statNames{k});
end
s = collections{1}.statisticsIndex;

%% Calculate the window ref sdr/med window channel deviations
refRatiosDev = cell(length(collections), 1);
for k = 1:length(collections)
    refRatiosDev{k} = collections{k}.statistics(:, s.rSDWinDevRef)./ ...
        collections{k}.statistics(:, s.medWinDevRef);
end;

%% Find the total number of points
titles = legendString;
totalPoints = 0;
data = refRatiosDev;
for k = 1:length(titles)
    totalPoints = totalPoints + length(data{k});
end
dataGroups = zeros(totalPoints, 1);
dataPoints = zeros(totalPoints, 1);
startGroup = 1;
for k = 1:length(titles)
    endGroup = startGroup + length(data{k}) - 1;
    dataGroups(startGroup:endGroup) = k;
    dataPoints(startGroup:endGroup) = data{k}(:);
    startGroup = endGroup + 1;
end
baseTitle = 'Window sdr/med ratio channel deviations';
figure('Name', baseTitle, 'Color', [1, 1, 1]);
boxplot(dataPoints, dataGroups, 'labels', titles, ...
    'orientation', 'horizontal', 'notch', 'on');
set(gca, 'FontSize', 12)
xlabel('SDR/Median window channel deviation', 'FontSize', 12)

%% Calculate the window ref sdr/med window channel HF
refRatios = cell(length(collections) + length(originalIndices), 1);
for k = 1:length(collections)
    refRatios{k} = collections{k}.statistics(:, s.rSDWinHFRef)./ ...
        collections{k}.statistics(:, s.medWinHFRef);
end;

baseLength = length(collections);
for k = 1:length(originalIndices)
    refRatios{k + baseLength} = ...
        collections{originalIndices{k}}.statistics(:, s.rSDWinHFOrig)./ ...
        collections{originalIndices{k}}.statistics(:, s.medWinHFOrig);
end

%% Find the total number of points
titles = legendString;
totalPoints = 0;
data = refRatios;
for k = 1:length(titles)
    totalPoints = totalPoints + length(data{k});
end
dataGroups = zeros(totalPoints, 1);
dataPoints = zeros(totalPoints, 1);
startGroup = 1;
for k = 1:length(titles)
    endGroup = startGroup + length(data{k}) - 1;
    dataGroups(startGroup:endGroup) = k;
    dataPoints(startGroup:endGroup) = data{k}(:);
    startGroup = endGroup + 1;
end
baseTitle = 'Window sdr/med ratio channel HF scores';
figure('Name', baseTitle, 'Color', [1, 1, 1]);
set(gca, 'FontSize', 12)
boxplot(dataPoints, dataGroups, 'labels', titles, ...
    'orientation', 'horizontal', 'notch', 'on');
set(gca, 'FontSize', 12)
xlabel('SDR/Median window HF scores', 'FontSize', 12)

%% Plot before and after mean max correlation
refCorr = cell(length(collections) + length(originalIndices), 1);
for k = 1:length(collections)
    refCorr{k} = collections{k}.statistics(:, s.aveCorRef);
end;

baseLength = length(collections);
for k = 1:length(originalIndices)
    refCorr{k + baseLength} = ...
        collections{originalIndices{k}}.statistics(:, s.aveCorOrig);
end

%% Find the total number of points
titles = legendString;
totalPoints = 0;
data = refCorr;
for k = 1:length(titles)
    totalPoints = totalPoints + length(data{k});
end
dataGroups = zeros(totalPoints, 1);
dataPoints = zeros(totalPoints, 1);
startGroup = 1;
for k = 1:length(titles)
    endGroup = startGroup + length(data{k}) - 1;
    dataGroups(startGroup:endGroup) = k;
    dataPoints(startGroup:endGroup) = data{k}(:);
    startGroup = endGroup + 1;
end
baseTitle = 'Window mean max correlation';
figure('Name', baseTitle, 'Color', [1, 1, 1]);
set(gca, 'FontSize', 12)
boxplot(dataPoints, dataGroups, 'labels', titles, ...
    'orientation', 'horizontal', 'notch', 'on', 'Colors', ...
    [0, 0, 0.9; 0, 0, 0; 0, 0.8, 0.2]);
set(gca, 'FontSize', 12)
xlabel('Mean max correlation', 'FontSize', 12)


%% Find the total number of points
titles = legendString;
totalPoints = 0;
data = refRatios;
for k = 1:length(titles)
    totalPoints = totalPoints + length(data{k});
end
dataGroups = zeros(totalPoints, 1);
dataPoints = zeros(totalPoints, 1);
startGroup = 1;
for k = 1:length(titles)
    endGroup = startGroup + length(data{k}) - 1;
    dataGroups(startGroup:endGroup) = k;
    dataPoints(startGroup:endGroup) = data{k}(:);
    startGroup = endGroup + 1;
end
baseTitle = 'Window sdr/med ratio channel HF scores';
figure('Name', baseTitle, 'Color', [1, 1, 1]);
set(gca, 'FontSize', 12)
boxplot(dataPoints, dataGroups, 'labels', titles, ...
    'orientation', 'horizontal', 'notch', 'on', 'Colors', ...
    [0, 0, 0.9; 0, 0, 0; 0, 0.8, 0.2]);
set(gca, 'FontSize', 12)
xlabel('SDR/Median window HF scores', 'FontSize', 12)

%% Plot referenced median max deviation
refDev = cell(length(collections) + length(originalIndices), 1);
for k = 1:length(collections)
    refDev{k} = collections{k}.statistics(:, s.medWinDevRef);
end;

baseLength = length(collections);
for k = 1:length(originalIndices)
    refDev{k + baseLength} = ...
        collections{originalIndices{k}}.statistics(:, s.medWinDevRef);
end

%% Find the total number of points
titles = legendString;
totalPoints = 0;
data = refDev;
for k = 1:length(titles)
    totalPoints = totalPoints + length(data{k});
end
dataGroups = zeros(totalPoints, 1);
dataPoints = zeros(totalPoints, 1);
startGroup = 1;
for k = 1:length(titles)
    endGroup = startGroup + length(data{k}) - 1;
    dataGroups(startGroup:endGroup) = k;
    dataPoints(startGroup:endGroup) = data{k}(:);
    startGroup = endGroup + 1;
end
baseTitle = 'Window median deviation';
figure('Name', baseTitle, 'Color', [1, 1, 1]);
h = boxplot(dataPoints, dataGroups, 'labels', titles, ...
    'orientation', 'horizontal', 'notch', 'on', 'Colors', ...
    [0, 0, 0.9; 0, 0, 0; 0, 0.8, 0.2], ...
    'datalim', [0, 20], 'extrememode', 'clip');
xlabel('Median window deviation', 'FontSize', 12)
set(gca, 'XLim', [0, 21], 'XLimMode', 'manual')
