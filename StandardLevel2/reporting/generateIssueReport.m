function [report, badFiles] = generateIssueReport(collectionStats, datasetIndex)
% Generates an issue report for datasetIndex from collection
if nargin < 2
    error('generateIssueReport:NotEnoughArgs', ...
        'generateIssueReport requires collection statistics and index args');
elseif datasetIndex < 1 || ...
        datasetIndex > size(collectionStats.statistics, 1)
    error('generateIssueReport:DataIndexOutOfBounds', ...
        ['datasetIndex should be in [1, ' ...
        num2str(size(collectionStats.statistics, 1)) ']']);
end
report = '';
badChans = collectionStats.noisyChannels{datasetIndex};
if ~isempty(badChans)
    %% Listing of noisy channels
    badList = getLabeledList(badChans.badChannelNumbers,  ...
        badChans.badChannelLabels, 50, '');
    report = [report ...
        sprintf('Noisy channels after referencing and interpolation: %s\n', badList)];
    if ~isempty(badChans.badInterpolated)
        report = [report ...
            sprintf('Noisy channels interpolated after referencing: %s\n', ...
            getListString(badChans.badInterpolated))];
    end
    if ~isempty(badChans.badNotInterpolated)
        report = [report ...
            sprintf('Noisy channels not interpolated after referencing: %s\n', ...
            getListString(badChans.badNotInterpolated))];
    end
    if ~isempty(badChans.badNaN)
        report = [report ...
            sprintf('Bad NaN channels: %s\n', getListString(badChans.badNaN))];
    end
    if ~isempty(badChans.badNoData)
        report = [report ...
            sprintf('Bad no data channels: %s\n', getListString(badChans.badNoData))];
    end
    if ~isempty(badChans.badDropOuts)
        report = [report ...
            sprintf('Bad drop out channels: %s\n', getListString(badChans.badDropOuts))];
    end
    if ~isempty(badChans.badCorr)
        report = [report ...
            sprintf('Bad correlation channels: %s\n', getListString(badChans.badCorr))];
    end
    if ~isempty(badChans.badDev)
        report = [report ...
            sprintf('Bad deviation channels: %s\n', getListString(badChans.badDev))];
    end
    if ~isempty(badChans.badRansac)
        report = [report ...
            sprintf('Bad ransac channels: %s\n', getListString(badChans.badRansac))];
    end
    if ~isempty(badChans.badHF)
        report = [report ...
            sprintf('Bad HF SNR channels: %s\n', getListString(badChans.badHF))];
    end
end
stats = collectionStats.statistics(datasetIndex, :);
s = collectionStats.statisticsIndex;

%% Median 
if stats(s.aveCorRef) > 0.91 && stats(s.medCorRef) > 0.95
    report = [report ... 
        sprintf('Max win correlation [median=%g, mean=%g]\n', ...
                stats(s.medCorRef), stats(s.aveCorRef))];
end
if stats(s.aveCorRef) > stats(s.medCorRef) > 0.9 || ...
   stats(s.aveCorRef) < stats(s.medCorRef) < 0.95 
   report = [report  ...
        sprintf('Referencing did not improve max win correlation [ref=%g, orig=%g]\n', ...
                stats(s.medCorRef), stats(s.medCorOrig))];
end
if stats(s.medDevRef) > stats(s.medDevOrig) 
   report = [report  ...
        sprintf('Referencing did not improve amplitude [ref=%g, orig=%g]\n', ...
                stats(s.medDevRef), stats(s.medDevOrig))];
end
if stats(s.medDevRef) > stats(s.medDevOrig) 
   report = [report  ...
        sprintf('Referencing did not improve overall amplitude [ref=%g, orig=%g]\n', ...
                stats(s.medDevRef), stats(s.medDevOrig))];
end
if stats(s.medWinDevRef) > stats(s.medWinDevOrig) 
   report = [report  ...
        sprintf('Referencing did not improve window amplitude [ref=%g, orig=%g]\n', ...
                stats(s.medWinDevRef), stats(s.medWinDevRef))];
end

