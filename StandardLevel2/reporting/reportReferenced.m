function summary = reportReferenced(fid, noisyParameters, numbersPerRow, indent)
%% Extracts and outputs parameters for referencing calculation
% Outputs a summary to file fid and returns a cell array of important messages
    summary = {};
    if ~isempty(noisyParameters.errors.reference)
        summary{end+1} =  noisyParameters.errors.reference;
        fprintf(fid, '%s\n', summary{end});
    end
    if ~isfield(noisyParameters, 'reference')
        summary{end+1} = 'Signal wasn''t referenced';
        fprintf(fid, '%s\n', summary{end});
        return;
    end
    reference = noisyParameters.reference;
    fprintf(fid, 'Rereferencing version %s\n',  ...
        noisyParameters.version.Reference);
    fprintf(fid, 'Sampling rate: %g Hz\n', reference.noisyOut.srate);

    fprintf(fid, 'Noisy channel detection parameters:\n');
    fprintf(fid, '%sRobust deviation threshold (z score): %g\n', ...
        indent, reference.noisyOut.robustDeviationThreshold);
    fprintf(fid, '%sHigh frequency noise threshold (ratio): %g\n', ...
        indent, reference.noisyOut.highFrequencyNoiseThreshold);
    fprintf(fid, '%sCorrelation window size (in seconds): %g\n', ...
        indent, reference.noisyOut.correlationWindowSeconds);
    fprintf(fid, '%sCorrelation threshold (with any channel): %g\n', ...
        indent, reference.noisyOut.correlationThreshold);
    fprintf(fid, '%sBad correlation threshold: %g\n', ...
        indent, reference.noisyOut.badTimeThreshold);
    fprintf(fid, '%s%s(fraction of time with low correlation or dropout)\n', ...
        indent, indent);
    fprintf(fid, '%sRansac sample size : %g\n', ...
        indent, reference.noisyOut.ransacSampleSize);
    fprintf(fid, '%s%s(number channels to use for interpolated estimate)\n', ...
        indent, indent);
    fprintf(fid, '%sRansac channel fraction (for ransac sample size): %g\n', ...
        indent, reference.noisyOut.ransacChannelFraction);
    fprintf(fid, '%sRansacCorrelationThreshold: %g\n', ...
        indent, reference.noisyOut.ransacCorrelationThreshold);
    fprintf(fid, '%sRansacUnbrokenTime (input parameter): %g\n', ...
        indent, reference.noisyOut.ransacUnbrokenTime);
    fprintf(fid, '%sRansacWindowSeconds (in seconds): %g\n', ...
        indent, reference.noisyOut.ransacWindowSeconds);
    fprintf(fid, '%sRansacPerformed: %g\n', indent, ...
        reference.noisyOut.ransacPerformed);
    fprintf(fid, '%sMaxInterpolationIterations: %g\n', indent, ...
        reference.maxInterpolationIterations);
    fprintf(fid, '%sActualInterpolationIterations: %g\n', indent, ...
        reference.actualInterpolationIterations);
    fprintf(fid, '\nReference channels (%d channels):\n', ...
        length(reference.referenceChannels));
    printList(fid, reference.referenceChannels, ...
        numbersPerRow, indent);
    fprintf(fid, '\nRereferencedChannels (%d channels):\n', ...
        length(reference.rereferencedChannels));
    printList(fid, reference.rereferencedChannels,  ...
        numbersPerRow, indent);
    
    %% Listing of noisy channels
    outOriginal = reference.noisyOutOriginal;
    outFinal = reference.noisyOut;
    channelLabels = {reference.channelLocations.labels};
    
    badList = getLabeledList(outOriginal.noisyChannels,  ...
        channelLabels(outOriginal.noisyChannels), numbersPerRow, indent);
    fprintf(fid, '\n\nNoisy channels before referencing:\n %s', badList);
    badList = getLabeledList(reference.interpolatedChannels, ...
        channelLabels(reference.interpolatedChannels), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\nNoisy channels interpolated after robust referencing:\n %s', ...
        badList);
    summary{end+1} = ['Interpolated channels: ' badList];
    
   
    badList = getLabeledList(outFinal.noisyChannels, ...
        channelLabels(outFinal.noisyChannels), numbersPerRow, indent);
    fprintf(fid, '\nNoisy channels after robust referencing:\n%s', ...
         badList);
    summary{end+1} = ['Potential noisy channels remaining: ' badList];
          
    if ~isempty(reference.badChannelsNotInterpolated)  
        badList = getLabeledList(reference.badChannelsNotInterpolated, ...
           channelLabels(reference.badChannelsNotInterpolated), ...
           numbersPerRow, indent);
       fprintf(fid, ...
           '\nRemaining bad channels that haven''t been interpolated:\n%s', ...
           badList);
        summary{end+1} = ...
            ['Remaining bad channels that haven''t been interpolated:', ...
            badList];
    end
    
    %% NaN criteria
    if isfield(outOriginal, 'badChannelsFromNaNs')   % temporary
        badList = getLabeledList(outOriginal.badChannelsFromNaNs, ...
            channelLabels(outOriginal.badChannelsFromNaNs), ...
            numbersPerRow, indent);
        fprintf(fid, '\n\nBad because of NaN (original):\n%s', badList);
 
        badList = getLabeledList(outFinal.badChannelsFromNaNs, ...
            channelLabels(outFinal.badChannelsFromNaNs), ...
            numbersPerRow, indent);
        fprintf(fid, '\nBad because of NaN (referenced):\n%s', badList');
        if ~isempty(outFinal.badChannelsFromNaNs)
            summary{end+1} = ['Bad because of NaN (referenced): ' badList];
        end
    end
    %% All constant criteria
    if isfield(outOriginal, 'badChannelsFromNaNs')   % temporary      
        badList = getLabeledList(outOriginal.badChannelsFromNoData, ...
            channelLabels(outOriginal.badChannelsFromNoData), ...
            numbersPerRow, indent);
        fprintf(fid, '\n\nBad because data is constant (original):\n%s',...
            badList);
        
        badList = getLabeledList(outFinal.badChannelsFromNoData, ...
            channelLabels(outFinal.badChannelsFromNoData), ...
            numbersPerRow, indent);
        fprintf(fid, '\nBad because data is constant (referenced):\n%s', ...
            badList);
        if ~isempty(outFinal.badChannelsFromNoData)
            summary{end+1} = ...
                ['Bad because data is constant (referenced): ' badList];
        end
    end
    %% Dropout criteria
    if isfield(outOriginal, 'badChannelsFromDropOuts')   % temporary    
        badList = getLabeledList(outOriginal.badChannelsFromDropOuts, ...
            channelLabels(outOriginal.badChannelsFromDropOuts), ...
            numbersPerRow, indent);
        fprintf(fid, ...
            '\n\nBad because of drop outs (original):\n%s', badList);       
        badList = getLabeledList(outFinal.badChannelsFromDropOuts, ...
            channelLabels(outFinal.badChannelsFromDropOuts), ...
            numbersPerRow, indent);
        fprintf(fid, ...
            '\nBad because of drop outs (referenced):\n%s', badList);
        if ~isempty(outFinal.badChannelsFromDropOuts)
            summary{end+1} = ...
                ['Bad because of drop outs (referenced): ' badList];
        end
    end
    %% Maximum correlation criterion
    badList = getLabeledList(outOriginal.badChannelsFromCorrelation, ...
        channelLabels(outOriginal.badChannelsFromCorrelation), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\n\nBad by max correlation criteria (original):\n%s', badList);
    badList = getLabeledList(outFinal.badChannelsFromCorrelation, ...
        channelLabels(outFinal.badChannelsFromCorrelation), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\nBad by max correlation criteria (referenced):\n%s', badList);
    if ~isempty(outFinal.badChannelsFromCorrelation)
        summary{end+1} = ...
            ['Bad by max correlation criteria (referenced): ' badList];
    end
    %% Large deviation criterion
    badList = getLabeledList(outOriginal.badChannelsFromDeviation, ...
        channelLabels(outOriginal.badChannelsFromDeviation), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\n\nBad by large deviation criteria (original):\n%s', badList);
    badList = getLabeledList(outFinal.badChannelsFromDeviation, ...
        channelLabels(outFinal.badChannelsFromDeviation), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\n\nBad by large deviation criteria (referenced):\n%s', badList);
    if ~isempty(outFinal.badChannelsFromDeviation)
        summary{end+1} = ...
            ['Bad by large deviation criteria (referenced): ' badList];
    end
    %% HF SNR ratio criterion
    badList = getLabeledList(outOriginal.badChannelsFromHFNoise, ...
        channelLabels(outOriginal.badChannelsFromHFNoise), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\n\nBad by HF noise (low SNR) criteria (original):\n%s', badList);
    badList = getLabeledList(outFinal.badChannelsFromHFNoise, ...
        channelLabels(outFinal.badChannelsFromHFNoise), ...
        numbersPerRow, indent);
    fprintf(fid, ...
        '\nBad by HF noise (low SNR) criteria (referenced):\n%s', badList);
    if ~isempty(outFinal.badChannelsFromHFNoise)
        summary{end+1} = ...
            ['Bad by HF noise (low SNR) criteria (referenced): ' badList];
    end
      
    %% Ransac criteria
    badList = getLabeledList(outOriginal.badChannelsFromRansac, ...
        channelLabels(outOriginal.badChannelsFromRansac), ...
        numbersPerRow, indent);
    fprintf(fid, '\n\nBad by Ransac criteria (original):\n%s', badList);
    fprintf(fid, '\nBad by Ransac criteria (referenced):\n%s', badList);
    badList = getLabeledList(outFinal.badChannelsFromRansac, ...
        channelLabels(outFinal.badChannelsFromRansac), ...
        numbersPerRow, indent);
    if ~isempty(outFinal.badChannelsFromRansac)
        summary{end+1} = ...
            ['Bad by Ransac criteria (rereferenced): ' badList];
    end

    %% Iteration report
    if isfield(reference, 'maxInterpolationIterations')
        report = sprintf('\nActual interpolation iterations: %d\n', ...
            reference.actualInterpolationIterations);
        if ~isempty(reference.badChannelsFromNaNs)
            report = [report sprintf('NaNs: %s\n', ...
                getListString(reference.badChannelsFromNaNs))];
        end
        if ~isempty(reference.badChannelsFromNoData)
            report = [report sprintf('NoData: %s\n', ...
                getListString(reference.badChannelsFromNoData))];
        end
        if ~isempty(reference.badChannelsFromHFNoise)
            report = [report sprintf('HF: %s\n', ...
                getListString(reference.badChannelsFromHFNoise))];
        end
        if ~isempty(reference.badChannelsFromCorrelation)
            report = [report sprintf('Correlation: %s\n', ...
                getListString(reference.badChannelsFromCorrelation)) ];
        end
        if ~isempty(reference.badChannelsFromDeviation)
            report = [report sprintf('Deviation: %s\n', ...
                getListString(reference.badChannelsFromDeviation)) ];
        end
        if ~isempty(reference.badChannelsFromRansac)
            report = [report sprintf('Ransac: %s\n', ...
                getListString(reference.badChannelsFromRansac))];
        end
        fprintf(fid, '%s', report);
        summary{end+1} = report;
    end
    
end