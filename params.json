{"name":"PREP Pipeline: EEG-Clean-Tools","tagline":"Contains tools for EEG standardized preprocessing","body":"# Introduction to the PREP pipeline\r\nThe PREP pipeline is a standardized early-stage EEG processing pipeline that focuses on the identification of bad channels and the calculation of a robust average reference. PREP also has an extensive reporting facility. It is designed to be run in a completely automated way. The major sections of this document are:\r\n* Introduction (requirements, citing, installation)\r\n* Algorithm (steps, meaning of parameters for each step)\r\n* Running as an EEGLAB plug-in\r\n* Running as a script\r\n\r\n### Requirements\r\nThe PREP pipeline relies on the MATLAB Signal Processing toolbox and EEGLAB, a freely-available MATLAB toolbox for processing EEG. EEG is available from  [http://scn.ucsd.edu/eeglab](http://scn.ucsd.edu/eeglab). PREP assumes that the EEG data is provided as an EEGLAB EEG structure and that channel locations are provided in the EEG.chanlocs structure.\r\n\r\n### Citing the PREP pipeline\r\nThe PREP pipeline is freely available under the GUN General Public License. \r\nPlease cite the following publication if using:  \r\n> Bigdely-Shamlo N, Mullen T, Kothe C, Su K-M and Robbins KA (2015)  \r\n> The PREP pipeline: standardized preprocessing for large-scale EEG analysis  \r\n> Front. Neuroinform. 9:16. doi: 10.3389/fninf.2015.00016  \r\n\r\n### Installation\r\nThe PREP pipeline can be run in two ways --- as a standalone toolbox or as an EEGLAB plugin. To run in standalone mode, simply download the PREP code, found the the EEG-Clean-Tools\r\n\r\n# PREP Overview\r\nThis section discusses the algorithm and the meeting of the various parameters.\r\n\r\n### Processing steps\r\n1. Handle boundary events prior to processing\r\n1. Detrend temporarily to properly compute thresholds\r\n1. Remove line-noise without committing to a filtering strategy\r\n1. Robustly reference the signal relative to an estimate of the “true” average reference\r\n1. Detect and interpolate bad channels relative to this reference\r\n1. Produce reports if desired\r\n1. Post process if desired\r\n\r\n## Boundary marker handling\r\nPREP is meant to work on data obtained from a continuous recording session. However, sometimes researchers record multiple sessions in the same file (such as by temporarily suspending and resuming recording). EEGLAB uses boundary events to mark\r\nthese discontinuities. Some (but not all) EEGLAB functions \r\n\r\n## Detrend (high pass filtering)\r\n\r\n\r\n## Line noise removal\r\nWe use an iterative version of the a method that estimates the amplitude and size of a deterministic sinusoid at a specified frequency embedded in locally white noise. The model is applied in sliding windows to adjust for non stationarity. The deterministic frequencies to be removed must be specified to within a small range. By default, the line noise removal (`cleanLineNoise`) attempts to removal multiples of 60 Hz. You might need to rerun with different frequencies if unusual spectral peaks are visible in the reports. \r\n\r\n### Calling sequence for line noise removal\r\nThe cleanLineNoise function takes two structures in and produces two output structures. The signal structure\r\nincludes a .data field and an .srate field. The signal structure is compatible with an EEGLAB EEG structure, but does not rely on any of the other EEGLAB fields. The data field should be channels x frames. \r\n\r\nAs with all functions in the pipeline, the algorithm parameters are passed in a structure.  \r\n> `[signal, lineNoiseOut] = cleanLineNoise(signal, lineNoiseIn)`  \r\n> `[signal, lineNoiseOut] = cleanLineNoise(signal)`  \r\n\r\nThe output structure contains all of the input structure fields plus additional fields containing information on the\r\ntapers used to compute the spectral components.\r\n\r\n**Example:**  \r\n> `lineNoiseIn = struct('lineNoiseChannels', [1:32, 40:60], 'lineFrequencies', [60, 120, 180, 212, 240]);`  \r\n\r\n\r\n### Parameters for line noise removal\r\nThe following parameters appear as fields in the structure that \r\n\r\n**`lineNoiseChannels`**  \r\n A row vector specifying the channel numbers of the channels to remove line noise from.  By default, PREP uses all of the channels (`1:size(signal.data, 1)`). If your signal has extraneous or unused channels, you should specify which channels to use.\r\n\r\n**`Fs`**  \r\nThe sampling frequency of the signal in Hz. By default, PREP uses the sampling rate specified in `signal.srate`. Usually you don't have to specify this parameter.  \r\n\r\n**`lineFrequencies`**  \r\nA vector of frequencies in Hz of the approximate locations of the line noise peaks to remove. By default, PREP removes multiples of 60 Hz up to the Nyquist frequency (which is half of the sampling frequency). After looking at the spectrum in the report, you may need to redo PREP with additional frequencies. If the data was recorded in a location using a 50 Hz power, you will also need to override.  \r\n\r\nThe clean line noise procedure used in PREP can only remove sharp peaks with minimal spectral distortion. It does not remove broad peaks. If the PREP reports show that line noise has not been removed to a sufficient extent, you may have to perform additional filtering for a particular application.  \r\n\r\n**`p`**   \r\nA significance cutoff level for removing a spectral peak. By default, PREP uses a p-value of 0.01. The clean line noise\r\nprocedure applies a F-test to determine whether a particular spectral peak is significantly higher than the background level in a small window. You should not have to override this parameter.  \r\n\r\n**`fScanBandWidth`**    \r\nHalf of the width of the frequency band centered on each line frequency. This band is used to search\r\nfor the exact value of the maximum amplitude frequency peak near the specified frequencies to be removed. \r\nBy default, PREP uses 2 Hz. You should not have to override this parameter.  \r\n\r\n**`taperBandWidth`**  \r\nBandwidth in Hz for the Sleppian tapers used to estimate the spectrum. By default, PREP\r\nuses 2 Hz. You should not have to override this parameter.  \r\n\r\n**`taperWindowSize`**  \r\nTaper sliding window length in seconds. By default, PREP uses 4 seconds. You should not have to override this parameter.  \r\n\r\n**`taperWindowStep`**  \r\nTaper sliding window step length in seconds. By default, PREP uses 1 second. You should not have to override this parameter.  \r\n\r\n**`tau`**  \r\nThe window overlap smoothing factor used in the exponent of the signmoidal smoothing functions. This sigmoidal smoothing function is used to patch results from sliding windows back together. By default, PREP uses a value of 100. You should not have to override this parameter.  \r\n\r\n**`pad`**  \r\nPadding factor for FFTs (-1= no padding, 0 = pad to next power of 2, 1 = pad to power of two after, etc.).\r\nBy default, PREP uses a pad factor of 0. A larger positive value gives better spectral results, but requires\r\nmuch greater computation time. Using a pad value of -1 is not recommended. You should not have to override this parameter.  \r\n\r\n**`fPassBand`**  \r\nThe frequency band (in units of Hz) used to compute the spectral background. By default, PREP\r\nuses `[0, Fs/2]`. You may need to adjust this range to get better spectral estimates.\r\n\r\n**`maximumIterations`**  \r\nThe maximum number of times that PREP applies the cleaning process to remove line noise. When a particular peak\r\nis not significantly above the background, it is removed from consideration. When no significant peaks remain, PREP\r\nstops the procedure. Most of the time, only a few iterations are required.  You should not have to override this parameter.  \r\n\r\n# Running PREP as an EEGLAB plugin\r\nYou can install PREP as an EEGLAB plugin by unzipping the ...  \r\n\r\n# Running the PREP pipeline \r\nLoad an EEG dataset to be processed using the Load dataset submenu under the File menu of EEGLAB.  The PREP pipeline \r\ncan be found under the Tools submenu:  \r\n![PREP from EEGLAB](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepFromEEGLAB.png)  \r\n\r\n![PREP main menu for EEGLAB plugin](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepMainMenu.png)  \r\n\r\n![PREP boundary menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepBoundaryParameters.png)  \r\n\r\n![PREP detrend menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepDetrendParameters.png)  \r\n\r\n![PREP line noise menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepLineNoiseParameters.png)  \r\n\r\n![PREP reference menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepReferenceParameters.png)  \r\n\r\n![PREP resample menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepResampleParameters.png)  \r\n\r\n![PREP report menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepReportParameters.png)  \r\n\r\n![PREP post process menu](https://raw.githubusercontent.com/VisLab/EEG-Clean-Tools/gh-pages/images/PrepPostProcess.png)  \r\n\r\n","google":"UA-66346771-1","note":"Don't delete this file! It's used internally to help with page regeneration."}